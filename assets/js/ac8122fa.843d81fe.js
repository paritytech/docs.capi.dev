"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[510],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(b,s(s({ref:n},c),{},{components:t})):r.createElement(b,s({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u[p]="string"==typeof e?e:a,s[1]=u;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3437:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},s="Subclasses",u={unversionedId:"rune/subclasses",id:"rune/subclasses",title:"Subclasses",description:"Rune enables fluent APIs by facilitating the use of Rune subclasses. Throughout",source:"@site/docs/rune/subclasses.md",sourceDirName:"rune",slug:"/rune/subclasses",permalink:"/rune/subclasses",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/rune/subclasses.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rune",permalink:"/rune/"},next:{title:"Interop With Other Libraries",permalink:"/rune/interop"}},i={},l=[{value:"Converting Between Rune Subclasses",id:"converting-between-rune-subclasses",level:2}],c={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"subclasses"},"Subclasses"),(0,a.kt)("p",null,"Rune enables fluent APIs by facilitating the use of Rune subclasses. Throughout\nthe introduction, we made use of a number of Rune subclasses, including ones\nbuilt-in to Rune (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueRune")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"FnRune"),") and some defined by Capi\n(such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ChainRune")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"PalletRune"),")."),(0,a.kt)("p",null,"The base ",(0,a.kt)("inlineCode",{parentName:"p"},"Rune")," class has only a few, core methods like ",(0,a.kt)("inlineCode",{parentName:"p"},".run()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".iter()"),",\nso as to not clutter the members of subclasses. Most convenience methods for\nmanipulating runes are placed on subclasses like ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueRune"),". For this reason,\nmany Rune APIs will default to making ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueRune"),"s (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Rune.constant"),")."),(0,a.kt)("h2",{id:"converting-between-rune-subclasses"},"Converting Between Rune Subclasses"),(0,a.kt)("p",null,"All runes have an ",(0,a.kt)("inlineCode",{parentName:"p"},".into()")," method that can be used to convert them to another\ncompatible Rune subclass. For example, a ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueRune")," of a function can be\nconverted into an ",(0,a.kt)("inlineCode",{parentName:"p"},"FnRune"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Rune } from "capi"\n\nconst add = Rune.constant((a: number, b: number) => a + b)\n// add: ValueRune<(a: number, b: number) => void>\n\nadd.call(1, 2) // error, `.call()` isn\'t defined on `ValueRune`\n\nconst addFn = add.into(FnRune)\n// addFn: FnRune<(a: number, b: number) => void>\n\nconst three = addFn.call(1, 2) // this works\n/// three: ValueRune<number>\n')),(0,a.kt)("p",null,"However, if you try to convert a ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueRune")," of something other than a function\ninto an ",(0,a.kt)("inlineCode",{parentName:"p"},"FnRune"),", you will get a type error (as expected)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"three.into(FnRune) // error, `number` is not a function\n")))}d.isMDXComponent=!0}}]);