"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[478],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),k=o,m=d["".concat(i,".").concat(k)]||d[k]||u[k]||r;return n?a.createElement(m,p(p({ref:t},c),{},{components:n})):a.createElement(m,p({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,p=new Array(r);p[0]=k;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:o,p[1]=s;for(var l=2;l<r;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6256:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={},p="Net Specs",s={unversionedId:"setup/net_specs",id:"setup/net_specs",title:"Net Specs",description:"Your net spec file, nets.ts, describes all the networks with which you wish to",source:"@site/docs/setup/net_specs.md",sourceDirName:"setup",slug:"/setup/net_specs",permalink:"/setup/net_specs",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/setup/net_specs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/setup/"},next:{title:"Development Networks",permalink:"/setup/development_nets"}},i={},l=[{value:"Basic Net Specs",id:"basic-net-specs",level:2},{value:"Parachain Net Specs",id:"parachain-net-specs",level:2},{value:"Development Net Specs",id:"development-net-specs",level:2},{value:"Convenience Binary Builds",id:"convenience-binary-builds",level:2},{value:"Development Parachain Net Specs",id:"development-parachain-net-specs",level:2},{value:"Targets",id:"targets",level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"net-specs"},"Net Specs"),(0,o.kt)("p",null,"Your net spec file, ",(0,o.kt)("inlineCode",{parentName:"p"},"nets.ts"),", describes all the networks with which you wish to\ninteract."),(0,o.kt)("p",null,"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"net"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { net } from "capi/nets"\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Deno users can import via the ",(0,o.kt)("inlineCode",{parentName:"p"},"deno.land/x")," distribution URL."),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { net } from "https://deno.land/x/capi/nets/mod.ts"\n'))),(0,o.kt)("p",null,"Whether your program is one of Node.JS or Deno, your first step to integrating\nCapi is to define your net specs. ",(0,o.kt)("strong",{parentName:"p"},"These will be the sources of truth from\nwhich Capi generates chain-specific APIs and spawns development networks"),"."),(0,o.kt)("h2",{id:"basic-net-specs"},"Basic Net Specs"),(0,o.kt)("p",null,"The following net spec describes the Polkadot relay chain, accessed through a\nproxy WebSocket URL."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export const polkadot = net.ws({ url: "wss://rpc.polkadot.io" })\n')),(0,o.kt)("h2",{id:"parachain-net-specs"},"Parachain Net Specs"),(0,o.kt)("p",null,"The same approach applies to parachains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export const polkadot = net.ws({ url: "wss://statemint-rpc.polkadot.io" })\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: unlike production parachain net specs, development parachain net specs\nneed to be associated with a development relay chain net spec. More on this\nbelow.")),(0,o.kt)("h2",{id:"development-net-specs"},"Development Net Specs"),(0,o.kt)("p",null,"During development, it is likely that you'll want to develop against an\nephemeral local network. Capi makes this incredibly simple. Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"net.dev"),"\nfunction to create a development relay chain net spec. Specify the relay chain's\nbinary and the ",(0,o.kt)("inlineCode",{parentName:"p"},"chain")," argument to be passed to that binary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export const polkadotDev = net.dev({\n  bin: "polkadot",\n  chain: "polkadot-dev",\n})\n')),(0,o.kt)("h2",{id:"convenience-binary-builds"},"Convenience Binary Builds"),(0,o.kt)("p",null,"The previous example was written with the assumption that we're using the\npolkadot CLI and that it is installed and in the current user's path as\n",(0,o.kt)("inlineCode",{parentName:"p"},'"polkadot"'),". Installing binaries such as Polkadot and Cumulus can be arduous.\nInstead, let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"bins"),", a utility which tells Capi to download and utilize\nprecompiled builds."),(0,o.kt)("p",null,"First, update your import."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- import { net } from "capi"\n+ import { bins, net } from "capi"\n')),(0,o.kt)("p",null,"Next, use ",(0,o.kt)("inlineCode",{parentName:"p"},"bins")," like so, specifying the binary name and desired version."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const bin = bins({\n  polkadot: ["polkadot", "v0.9.38"],\n})\n')),(0,o.kt)("p",null,"Finally, use the given helper instance's net-specific prop (in this case aliased\n",(0,o.kt)("inlineCode",{parentName:"p"},"bin.polkadot"),") in the dev net spec factory's ",(0,o.kt)("inlineCode",{parentName:"p"},"bin"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export const polkadotDev = net.dev({\n  bin: bin.polkadot,\n  chain: "polkadot-dev",\n})\n')),(0,o.kt)("p",null,"Altogether now:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { bins, net } from "capi"\n\nconst bin = bins({ polkadot: ["polkadot", "v0.9.38"] })\n\nexport const polkadotDev = net.dev({\n  bin: bin.polkadot,\n  chain: "polkadot-dev",\n})\n')),(0,o.kt)("p",null,"Here is a more complex example of props for ",(0,o.kt)("inlineCode",{parentName:"p"},"bins"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'bins({\n  polkadot: ["polkadot-fast", "v0.9.38"],\n  polkadotParachain: ["polkadot-parachain-fast", "v0.9.380"],\n  substrateContractsNode: ["substrate-contracts-node", "v0.24.0"],\n  trappistPolkadot: ["polkadot", "v0.9.37"],\n  trappistPolkadotParachain: ["polkadot-parachain", "v0.9.370"],\n  trappist: ["trappist-collator", "79bba6e"],\n})\n')),(0,o.kt)("h2",{id:"development-parachain-net-specs"},"Development Parachain Net Specs"),(0,o.kt)("p",null,"To configure a development parachain, utilize the corresponding relaychain\nspec's ",(0,o.kt)("inlineCode",{parentName:"p"},"parachain")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const bin = bins({\n  polkadot: ["polkadot-fast", "v0.9.38"],\n  polkadotParachain: ["polkadot-parachain-fast", "v0.9.380"],\n})\n\nexport const polkadotDev = net.dev({\n  bin: bin.polkadot,\n  chain: "polkadot-dev",\n})\n\nexport const statemintDev = polkadotDev.parachain({\n  bin: bin.polkadotParachain,\n  chain: "statemine-local",\n  id: 1000,\n})\n')),(0,o.kt)("h2",{id:"targets"},"Targets"),(0,o.kt)("p",null,"Targets allow us to easily swap the underlying connection during different\nstages of development."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const bin = bins({ polkadot: ["polkadot", "v0.9.38"] })\n\nexport const polkadotDev = net.dev({\n  bin: bin.polkadot,\n  chain: "polkadot-dev",\n})\n\nexport const polkadot = net.ws({\n  url: "wss://rpc.polkadot.io/",\n  targets: { dev: polkadotDev },\n})\n')),(0,o.kt)("p",null,"We'll dig into this in ",(0,o.kt)("a",{parentName:"p",href:"/setup/development_nets"},"the next section"),", where we'll\ncover making use of the Capi development server."))}u.isMDXComponent=!0}}]);