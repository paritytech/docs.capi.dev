"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[488],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),u=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},c=function(e){var r=u(e.components);return t.createElement(l.Provider,{value:r},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),v=a,m=p["".concat(l,".").concat(v)]||p[v]||b[v]||o;return n?t.createElement(m,s(s({ref:r},c),{},{components:n})):t.createElement(m,s({ref:r},c))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=v;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},4156:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var t=n(7462),a=(n(7294),n(3905));const o={},s="Interop With Other Libraries",i={unversionedId:"rune/interop",id:"rune/interop",title:"Interop With Other Libraries",description:"React/Preact",source:"@site/docs/rune/interop.md",sourceDirName:"rune",slug:"/rune/interop",permalink:"/rune/interop",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/rune/interop.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Subclasses",permalink:"/rune/subclasses"},next:{title:"Advanced",permalink:"/rune/advanced/"}},l={},u=[{value:"React/Preact",id:"reactpreact",level:2},{value:"Observable Libraries",id:"observable-libraries",level:2}],c={toc:u},p="wrapper";function b(e){let{components:r,...n}=e;return(0,a.kt)(p,(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interop-with-other-libraries"},"Interop With Other Libraries"),(0,a.kt)("h2",{id:"reactpreact"},"React/Preact"),(0,a.kt)("p",null,"Soon, we will write a ",(0,a.kt)("inlineCode",{parentName:"p"},"useRune")," hook that allows easy consumption of runes from\nReact/Preact, with full subscription capability. See\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/capi/issues/1152"},"#1152"),"."),(0,a.kt)("p",null,"For now, we recommend you use ",(0,a.kt)("inlineCode",{parentName:"p"},".run()")," on the rune, and treat it like any other\nasynchronous method call."),(0,a.kt)("h2",{id:"observable-libraries"},"Observable Libraries"),(0,a.kt)("p",null,"A simple RxJS-observable-to-rune could look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { is, Runner, RunStream, ValueRune } from "capi"\nimport { Observable } from "rxjs"\n\nconst observableToRune = <T>(\n  observable: Observable<T>,\n): ValueRune<T, ObservableError> =>\n  ValueRune.new(RunObservable, observable).unhandle(is(ObservableError))\n\nclass RunObservable<T> extends RunStream<T | ObservableError> {\n  subscription\n  constructor(runner: Runner, observable: Observable<T>) {\n    super(runner)\n    this.subscription = observable.subscribe({\n      next: (value) => {\n        this.push(value)\n      },\n      error: (e) => {\n        this.push(new ObservableError(e))\n        this.finish()\n      },\n      complete: () => {\n        this.finish()\n      },\n    })\n  }\n\n  override cleanup(): void {\n    this.subscription.unsubscribe()\n  }\n}\n\nclass ObservableError extends Error {\n  override readonly name = "ObservableError"\n  constructor(public value: unknown) {\n    super()\n  }\n}\n')),(0,a.kt)("p",null,"A rune-to-observable is inherently lossy, as runes carry more information than\nobservables. However, a simple rune-to-RxJS-observable could be implemented as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Rune } from "capi"\nimport { Observable } from "rxjs"\n\nconst runeToObservable = <T>(\n  rune: Rune<T, unknown>,\n): Observable<T> =>\n  new Observable((subscriber) => {\n    let stop = false\n    ;(async () => {\n      try {\n        for await (const value of rune.iter()) {\n          if (stop) break\n          subscriber.next(value)\n        }\n        subscriber.complete()\n      } catch (e) {\n        subscriber.error(e)\n      }\n    })()\n    return () => {\n      stop = true\n    }\n  })\n')),(0,a.kt)("p",null,"See also ",(0,a.kt)("a",{parentName:"p",href:"/rune/advanced/runes-vs-observables"},"Runes vs Observables"),"."))}b.isMDXComponent=!0}}]);