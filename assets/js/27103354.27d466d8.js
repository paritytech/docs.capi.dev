"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9306:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},s="Storage",i={unversionedId:"basics/storage",id:"basics/storage",title:"Storage",description:"The first step in interacting with storage is to create a Rune representing the",source:"@site/docs/basics/storage.md",sourceDirName:"basics",slug:"/basics/storage",permalink:"/basics/storage",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/basics/storage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Blocks",permalink:"/basics/blocks"},next:{title:"Extrinsics",permalink:"/basics/extrinsics"}},c={},l=[{value:"Storage Types",id:"storage-types",level:2},{value:"Items",id:"items",level:2},{value:"Maps",id:"maps",level:2},{value:"&quot;N&quot; Maps",id:"n-maps",level:2},{value:"Map Pagination",id:"map-pagination",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"storage"},"Storage"),(0,r.kt)("p",null,"The first step in interacting with storage is to create a Rune representing the\nspecific piece of storage."),(0,r.kt)("h2",{id:"storage-types"},"Storage Types"),(0,r.kt)("p",null,"Let's use the fluent root to access some different kinds of storage."),(0,r.kt)("h2",{id:"items"},"Items"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const now = polkadot.Timestamp.Now.value()\n\nnow satisfies StorageRune<Polkadot, "Timestamp", "Now", never>\n')),(0,r.kt)("p",null,"To access the value at a specific block hash, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," and the block\nhash string as the arguments of ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),". Otherwise, leave these two parameters\nblank."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const now = polkadot.Timestamp.Now.value(undefined, blockHash)\n")),(0,r.kt)("h2",{id:"maps"},"Maps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"declare const publicKey: string\n\nconst accountInfo = polkadot.System.Account.value(publicKey)\n\naccountInfo satisfies ValueRune<\n  AccountInfo | undefined,\n  ConnectionError | ServerError | $.ShapeError\n>\n")),(0,r.kt)("p",null,"To access the value at a specific block hash, specify the block hash string as\nthe second arguments of ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const accountInfo = polkadot.System.Account.value(publicKey, blockHash)\n")),(0,r.kt)("h2",{id:"n-maps"},'"N" Maps'),(0,r.kt)("p",null,'The arguments of "N" maps\' ',(0,r.kt)("inlineCode",{parentName:"p"},"value")," are to be supplied within a tuple. I.e., if\nwe have an NMap of ",(0,r.kt)("inlineCode",{parentName:"p"},"(A, B, C)"),", we call ",(0,r.kt)("inlineCode",{parentName:"p"},".value([a, b, c])"),"."),(0,r.kt)("h2",{id:"map-pagination"},"Map Pagination"),(0,r.kt)("p",null,"We can paginate a maps keys and/or entries with ",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keysRaw"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"entries")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"entriesRaw"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"Raw"),"-postfixed methods forgo the decoding process, whereas\nthe non-raw methods will decode the keys (and values in the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"entries"),")\nin accordance with the FRAME metadata."),(0,r.kt)("p",null,"Let's create a Rune that describes the first 10 entries of Polkadot's ",(0,r.kt)("inlineCode",{parentName:"p"},"System"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"Account"),"s map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const accountEntries = await polkadot.System.Account.entries({\n  limit: 10,\n})\n\naccountEntries satisfies Rune<\n  [Uint8Array, AccountInfo][],\n  ConnectionError | ServerError | $.ShapeError\n>\n")),(0,r.kt)("p",null,"We can also supply a starting key and/or a partial key should we want to further\nzero in on specific values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"declare const start: Uint8Array // a public key\n\nconst accountEntries = await polkadot.System.Account.entries({\n  limit: 10,\n  start,\n})\n")),(0,r.kt)("p",null,"To access the entries at a specific block hash, specify the block hash string as\nthe second arguments of ",(0,r.kt)("inlineCode",{parentName:"p"},"entries"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const accountEntries = await polkadot.System.Account.entries(\n  { limit: 10 },\n  blockHash,\n)\n")))}d.isMDXComponent=!0}}]);