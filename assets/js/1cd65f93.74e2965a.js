"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[172],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={},o="Timing",l={unversionedId:"rune/advanced/timing",id:"rune/advanced/timing",title:"Timing",description:'Rune has a "timing system". (It\'s important to note that the "time" in this',source:"@site/docs/rune/advanced/timing.md",sourceDirName:"rune/advanced",slug:"/rune/advanced/timing",permalink:"/rune/advanced/timing",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/rune/advanced/timing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Advanced",permalink:"/rune/advanced/"},next:{title:"Custom Rune Logic",permalink:"/rune/advanced/custom-runes"}},p={},s=[],d={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"timing"},"Timing"),(0,i.kt)("p",null,'Rune has a "timing system". (It\'s important to note that the "time" in this\nsystem does not refer to clock time, but rather a Rune-specific construct of\ntime that is used to track updates).'),(0,i.kt)("p",null,'Its timing system is designed to ensure consistent results when combining\nsubscriptions. Here, "consistent results" means that, in any pair of dependent\nrunes (whether a direct or indirect dependency), the values yielded by the\ndependent rune each correspond to exactly one value yielded by the independent\nrune (i.e. the dependency).'),(0,i.kt)("p",null,"For example, take the following rune dependency graph:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  a\n / \\\nb   c\n \\ /\n  d\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," is dependent on both ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"c"),", each of which are dependent on ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),".\nRune ensures that the values yielded by ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," each correspond to exactly one value\nyielded by ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," \u2013 meaning, the values of ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," from which any given value\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," derives are themselves both derived from the same value of ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,i.kt)("p",null,"Rune is designed such that this property holds in any Rune dependency graph."),(0,i.kt)("p",null,"This consistency is important for Capi, as it deals with combining subscriptions\nvery frequently. For example, the above dependency graph appears in a very basic\nusage of Capi, where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"a")," is a subscription to the most recent block hash"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"b")," tracks the block number corresponding to ",(0,i.kt)("inlineCode",{parentName:"li"},"a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"c")," reads the ",(0,i.kt)("inlineCode",{parentName:"li"},"Timestamp.Now")," storage value at the block ",(0,i.kt)("inlineCode",{parentName:"li"},"a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"d")," combines ",(0,i.kt)("inlineCode",{parentName:"li"},"b")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"c")," to log out block numbers and their corresponding\ntimestamps")),(0,i.kt)("p",null,"If Runes did not guarantee consistency, this setup could produce inaccurate\nlogs, where the block number and timestamps corresponded to two different block\nhashes."),(0,i.kt)("p",null,"The core properties of Rune's timing system can be viewed as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"there is a shared timeline"),(0,i.kt)("li",{parentName:"ul"},"the timeline is indexed by times, which are natural numbers"),(0,i.kt)("li",{parentName:"ul"},"the timeline can be extended with new times"),(0,i.kt)("li",{parentName:"ul"},"times semantically correspond to external events"),(0,i.kt)("li",{parentName:"ul"},"runes can update at a specific time"),(0,i.kt)("li",{parentName:"ul"},"when a rune updates, its dependencies also update"),(0,i.kt)("li",{parentName:"ul"},"runes can be evaluated for a given time"),(0,i.kt)("li",{parentName:"ul"},"when a rune is evaluated for a time where it did not update, it keeps its old\nvalue"),(0,i.kt)("li",{parentName:"ul"},"when runes are evaluated for a given time, they evaluate their dependencies\nfor that same time")),(0,i.kt)("p",null,"So, in the above ",(0,i.kt)("inlineCode",{parentName:"p"},"abcd")," example, ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),' is the only "event source" (formally, the\nonly rune that is extending the timeline). Whenever an external event comes in\n(in the Capi case, whenever there is a new block hash), it extends the timeline\nwith a new time ',(0,i.kt)("inlineCode",{parentName:"p"},"t"),", and updates at that time ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),". Consequently, ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"c"),"\nboth update at ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", which causes ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," to update at ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),". Then, ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," is evaluated\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", which uses the evaluation of ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", which both use the\nevaluation of ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,i.kt)("p",null,"Because evaluation of runes happens corresponding to a specific time,\nconsistency is ensured \u2013 all parts of ",(0,i.kt)("inlineCode",{parentName:"p"},"d"),"'s value will correspond to the time\n",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", even if new ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," events occur while ",(0,i.kt)("inlineCode",{parentName:"p"},"d")," is still evaluating for time ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),"."))}u.isMDXComponent=!0}}]);