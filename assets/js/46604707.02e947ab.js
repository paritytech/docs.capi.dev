"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[864],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,b=u["".concat(l,".").concat(d)]||u[d]||k[d]||c;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<c;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>c,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const c={},o="Blocks",i={unversionedId:"basics/blocks",id:"basics/blocks",title:"Blocks",description:"Latest Finalized Block Hash",source:"@site/docs/basics/blocks.md",sourceDirName:"basics",slug:"/basics/blocks",permalink:"/basics/blocks",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/basics/blocks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rune Primer",permalink:"/basics/rune_primer"},next:{title:"Storage",permalink:"/basics/storage"}},l={},s=[{value:"Latest Finalized Block Hash",id:"latest-finalized-block-hash",level:2},{value:"Latest Finalized Block",id:"latest-finalized-block",level:2},{value:"Reference A Specific Block",id:"reference-a-specific-block",level:2},{value:"Block Extrinsics",id:"block-extrinsics",level:2},{value:"Block Events",id:"block-events",level:2}],p={toc:s},u="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blocks"},"Blocks"),(0,a.kt)("h2",{id:"latest-finalized-block-hash"},"Latest Finalized Block Hash"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const blockHash = await chain.blockHash().run()\n")),(0,a.kt)("h2",{id:"latest-finalized-block"},"Latest Finalized Block"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"const block = await chain\n  .blockHash()\n+ .block()\n  .run()\n")),(0,a.kt)("h2",{id:"reference-a-specific-block"},"Reference A Specific Block"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"declare const hash: string\n\nconst block = await chain\n  .blockHash(hash)\n  .block()\n  .run()\n")),(0,a.kt)("h2",{id:"block-extrinsics"},"Block Extrinsics"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const block = await chain\n  .blockHash()\n  .block()\n  .extrinsics()\n  .run()\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: the ",(0,a.kt)("inlineCode",{parentName:"p"},"extrinsics")," decodes the extrinsics in accordance with the given\nchain's FRAME metadata. To instead access the raw (encoded) extrinsics, use\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"extrinsicsRaw")," method.")),(0,a.kt)("h2",{id:"block-events"},"Block Events"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const block = await chain\n  .blockHash()\n  .block()\n  .events()\n  .run()\n")))}k.isMDXComponent=!0}}]);