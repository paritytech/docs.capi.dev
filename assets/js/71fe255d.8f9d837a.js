"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[451],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},939:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},i="Rune Primer",l={unversionedId:"basics/rune_primer",id:"basics/rune_primer",title:"Rune Primer",description:"Before we move any further, let's briefly touch on Rune (which we cover more in",source:"@site/docs/basics/rune_primer.md",sourceDirName:"basics",slug:"/basics/rune_primer",permalink:"/basics/rune_primer",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/basics/rune_primer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/basics/"},next:{title:"Blocks",permalink:"/basics/blocks"}},s={},c=[{value:"Basic Example",id:"basic-example",level:2},{value:"Composition",id:"composition",level:2},{value:"&quot;Handling&quot;",id:"handling",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rune-primer"},"Rune Primer"),(0,a.kt)("p",null,"Before we move any further, let's briefly touch on Rune (which we cover more in\ndepth in ",(0,a.kt)("a",{parentName:"p",href:"/rune"},"a later section"),")."),(0,a.kt)("p",null,"Rune is a novel system for modeling TypeScript APIs. Developed by the Capi core\nteam, this system is geared towards enabling a wide range of capabilities\nconducive to enhanced end-user experiences. In the near-term, it enables\ntype-safe error handling, automatic parallelism and a declarative and\nresource-considerate DX."),(0,a.kt)("p",null,"If this sounds intimidating, worry not; ",(0,a.kt)("strong",{parentName:"p"},"you'll barely notice Rune's\npresence"),". You can think of it as Capi's query builder API."),(0,a.kt)("h2",{id:"basic-example"},"Basic Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\n\nconst firstTenEntries = polkadot.System.Account.entries({ limit: 10 })\n\nfirstTenEntries.run() // `Promise<AccountInfo>`\n')),(0,a.kt)("p",null,"There are three key steps in this example:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We create a rune named ",(0,a.kt)("inlineCode",{parentName:"li"},"firstTenEntries"),". This is a description of what we\nwant, not the actual result. Network interaction has yet to occur."),(0,a.kt)("li",{parentName:"ol"},"We execute the ",(0,a.kt)("inlineCode",{parentName:"li"},"firstTenEntries")," Rune, which gives a promise resolving to\n",(0,a.kt)("inlineCode",{parentName:"li"},"AccountInfo"))),(0,a.kt)("h2",{id:"composition"},"Composition"),(0,a.kt)("p",null,"The intention behind Rune is to enable composition of complex interactions\n(potentially spanning many chains). This spares developers of needing to think\nabout properties such as async/await or performance tweaks such as\ndeduplication."),(0,a.kt)("p",null,"Let's model a derived read in which we retrieve the active staking era in order\nto retrieve that era's reward points."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { westend } from "@capi/westend"\nimport { is } from "capi"\n\nconst idx = westend.Staking.ActiveEra\n  .value()\n  .unhandle(is(undefined))\n  .access("index")\n\nconst points = await westend.Staking.ErasRewardPoints.value(idx)\n')),(0,a.kt)("h2",{id:"handling"},'"Handling"'),(0,a.kt)("p",null,"You may notice the ",(0,a.kt)("inlineCode",{parentName:"p"},"unhandle")," method usage in the previous snippet. This enables\nus to halt Rune execution and bubble up a given value (could be anything, but\nusually ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," subtype). In this regard, Rune is a functional\neffect system. We can leverage this system for type-safe error handling."),(0,a.kt)("p",null,"Consider the example of a simple storage read."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\n\nconst accountInfo = polkadot.System.Account.value(alexa.publicKey)\n')),(0,a.kt)("p",null,"The signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"accountInfo")," Rune is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ValueRune<\n  AccountInfo | undefined, // the `T` type parameter, the main type\n  ConnectionError | ServerError | $.ShapeError // the `U` type parameter, what has been unhandled\n>\n")),(0,a.kt)("p",null,"Let's rehandle ",(0,a.kt)("inlineCode",{parentName:"p"},"ServerError"),"s."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\nimport { is, Rune, ServerError } from "capi"\n\nconst fallback = Rune.constant("the fallback" as const)\n\nconst accountInfo = polkadot.System.Account\n  .value(alexa.publicKey)\n  .rehandle(is(ServerError), () => fallback)\n')),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"accountInfo")," Rune now has the following type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'ValueRune<\n  AccountInfo | undefined | "the fallback",\n  ConnectionError | $.ShapeError\n>\n')))}d.isMDXComponent=!0}}]);