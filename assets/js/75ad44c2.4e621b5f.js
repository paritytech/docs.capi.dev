"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[62],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,u=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||u;return t?r.createElement(h,i(i({ref:n},c),{},{components:t})):r.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var u=t.length,i=new Array(u);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<u;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7817:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const u={},i="Custom Rune Logic",o={unversionedId:"rune/advanced/custom-runes",id:"rune/advanced/custom-runes",title:"Custom Rune Logic",description:"None of Rune's built-in operators are privileged; they could all be implemented",source:"@site/docs/rune/advanced/custom-runes.md",sourceDirName:"rune/advanced",slug:"/rune/advanced/custom-runes",permalink:"/rune/advanced/custom-runes",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/rune/advanced/custom-runes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Timing",permalink:"/rune/advanced/timing"},next:{title:"Runes vs Observables",permalink:"/rune/advanced/runes-vs-observables"}},s={},l=[{value:"Implementing <code>Run._evaluate</code>",id:"implementing-run_evaluate",level:2}],c={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-rune-logic"},"Custom Rune Logic"),(0,a.kt)("p",null,"None of Rune's built-in operators are privileged; they could all be implemented\nas external libraries."),(0,a.kt)("p",null,"Every ",(0,a.kt)("inlineCode",{parentName:"p"},"Rune<T, U>")," is a small wrapper around a ",(0,a.kt)("inlineCode",{parentName:"p"},"Run<T, U>"),", which holds the\nexecution logic. By subclassing ",(0,a.kt)("inlineCode",{parentName:"p"},"Run"),", you can customize this logic."),(0,a.kt)("p",null,"All built-in operators do this. For example, to implement ",(0,a.kt)("inlineCode",{parentName:"p"},"map"),", you can define\nthe following ",(0,a.kt)("inlineCode",{parentName:"p"},"Run")," subclass:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class RunMap<T1, U, T2> extends Run<T2, U> {\n  source: Run<T1, U>\n  fn: (value: T1) => T2\n\n  constructor(\n    runner: Runner, // this argument must appear in every Run subclass\n    // the rest are specific to `RunMap`:\n    source: Rune<T1, U>,\n    fn: (value: T1) => T2,\n  ) {\n    super(runner)\n    this.source = this.use(source) // instantiate `source` and register the dependency\n    this.fn = fn\n  }\n\n  lastValue!: T2\n  async _evaluate(time: number, receipt: Receipt) {\n    // evaluate the source rune at the given time\n    const source = await this.source.evaluate(time, receipt)\n    // if the source rune is not ready, or it has not changed...\n    if (!receipt.ready || !receipt.novel) {\n      // skip calling `this.fn` and return the last value\n      return this.lastValue\n    }\n    // otherwise, call `this.fn` and update `this.lastValue`\n    return this.lastValue = this.fn(source)\n  }\n}\n")),(0,a.kt)("p",null,"Then, in ",(0,a.kt)("inlineCode",{parentName:"p"},"map"),", you construct a rune using this logic using ",(0,a.kt)("inlineCode",{parentName:"p"},"Rune.new"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const map = <T1, U, T2>(source: Rune<T1, U>, fn: (x: T1) => T2): Rune<T2, U> =>\n  Rune.new(RunMap, source, fn)\n")),(0,a.kt)("p",null,"Rune also exports a few abstract ",(0,a.kt)("inlineCode",{parentName:"p"},"Run")," subclasses that you can use as a base for\nbuilding other ",(0,a.kt)("inlineCode",{parentName:"p"},"Run")," subclasses."),(0,a.kt)("p",null,"For example, if you have some external event stream that you would like to turn\ninto a rune, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"RunStream"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class RunMyThing extends RunStream<MyValue> {\n  constructor(runner: Runner, ...) {\n    super(runner)\n    // initialize as necessary\n    // call `this.push(value)` when values are recieved\n    // call `this.finish()` when complete\n  }\n\n  override cleanup(): void {\n    // clean up as necessary\n  }\n}\n\nconst myThing = (...) => Rune.new(RunMyThing, ...)\n")),(0,a.kt)("h2",{id:"implementing-run_evaluate"},"Implementing ",(0,a.kt)("inlineCode",{parentName:"h2"},"Run._evaluate")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: When subclassing ",(0,a.kt)("inlineCode",{parentName:"em"},"Run")," directly, care must be taken to implement this\nmethod properly, as there are a number of invariants you must comply with.")),(0,a.kt)("p",null,"TODO: document these invariants\n(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/capi/issues/1149"},"#1149"),")"))}m.isMDXComponent=!0}}]);