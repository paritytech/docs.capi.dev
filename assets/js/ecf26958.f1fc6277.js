"use strict";(self.webpackChunkdocs_capi_dev_2=self.webpackChunkdocs_capi_dev_2||[]).push([[559],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return t?a.createElement(h,i(i({ref:n},u),{},{components:t})):a.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},736:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={},i="Rune",s={unversionedId:"rune/index",id:"rune/index",title:"Rune",description:"What Is Rune?",source:"@site/docs/rune/index.md",sourceDirName:"rune",slug:"/rune/",permalink:"/rune/",draft:!1,editUrl:"https://github.com/paritytech/docs.capi.dev/tree/main/docs/rune/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Types",permalink:"/types"},next:{title:"Subclasses",permalink:"/rune/subclasses"}},l={},c=[{value:"What Is Rune?",id:"what-is-rune",level:2},{value:"Basic Examples",id:"basic-examples",level:2},{value:"An Interesting Example",id:"an-interesting-example",level:2},{value:"Subscriptions",id:"subscriptions",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rune"},"Rune"),(0,o.kt)("h2",{id:"what-is-rune"},"What Is Rune?"),(0,o.kt)("p",null,"Rune is the basis for Capi's fluent query builder API."),(0,o.kt)("p",null,"Rune facilitates obtaining correct results when working with multiple\ninterrelated subscriptions, which arise from cross-chain interactions."),(0,o.kt)("p",null,"Additionally, Rune abstracts away how queries are executed, allowing developers\nto focus on defining the data they want to access."),(0,o.kt)("h2",{id:"basic-examples"},"Basic Examples"),(0,o.kt)("p",null,"A rune can be created from a value, resulting in a ",(0,o.kt)("inlineCode",{parentName:"p"},"ValueRune"),". The rune can\nthen be ",(0,o.kt)("inlineCode",{parentName:"p"},".run()")," to retrieve the original value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Rune } from "capi"\n\nconst myRune = Rune.constant(123)\n// myRune: ValueRune<number>\n\nconst myValue = await myRune.run()\nconsole.log(myValue) // 123\n')),(0,o.kt)("p",null,"A rune can also be created from a function, which results in a ",(0,o.kt)("inlineCode",{parentName:"p"},"FnRune"),". Runes\nare inherently lazy \u2013 they don't do anything until you ",(0,o.kt)("inlineCode",{parentName:"p"},".run()")," them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Rune } from "capi"\n\nconst printAndAdd = Rune.fn((a: number, b: number) => {\n  console.log(a + b)\n})\n// printAndAdd: FnRune<(a: number, b: number) => void>\n\nconst printThree = printAndAdd.call(1, 2) // no console output\n// printThree: ValueRune<void>\n\nawait printThree.run() // 3\n')),(0,o.kt)("h2",{id:"an-interesting-example"},"An Interesting Example"),(0,o.kt)("p",null,"Here, we'll use Capi to see real-world Rune usage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { polkadot } from \"@capi/polkadot\"\n// polkadot: ChainRune\n\n// Specific to Capi's API:\n//   `polkadot` has `PalletRune` members, such as `polkadot.Timestamp`.\n//   `polkadot.Timestamp` has `StorageRune` members, such as `polkadot.Timestamp.Now`.\n//    A `StorageRune` corresponds an on-chain storage map or item.\n\n// The chain's current recorded time.\nconst time = polkadot.Timestamp.Now.value()\n// time: ValueRune<bigint>\n// Specific to Capi's API:\n//   On-chain timestamps are stored as `u64`s (64-bit integers).\n//   A regular JS `number` is not large enough to store all 64-bit integers.\n//   Thus, in JS, it is a `bigint`.\n\nconsole.log(await time.run()) // 1683481710000n (for example)\n")),(0,o.kt)("p",null,"We can also get the timestamp at a specific block hash:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\n\nconst blockHash =\n  "0x0fb7fb31a01c7b6697d663d0040ae034e7c2d4e2a4aa7517424a8d3af2fa4135"\n\nconst time = polkadot.Timestamp.Now.value(undefined, blockHash)\n// Specific to Capi\'s API:\n//   The `undefined` corresponds to the storage key.\n//   To specify the second argument (the block hash), we must now explicitly specify the storage key.\n//   Because `Now` is a storage item (not a storage map), its only key is `undefined`.\n\nconsole.log(await time.run()) // 1683556218000n\n')),(0,o.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,o.kt)("p",null,"Rune is also designed to seamlessly integrate subscriptions. We can modify the\nprevious example to subscribe to the latest timestamp."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { polkadot } from \"@capi/polkadot\"\n\nconst blockHash = polkadot.latestBlockHash\n// blockHash: BlockHashRune\n// `blockHash` is a subscription to the chain's latest block.\n// Like the other runes, it doesn't do anything until it is run.\n\nconst time = polkadot.Timestamp.Now.value(undefined, blockHash)\n// Because we passed a subscription in to the block hash parameter,\n// the `time` rune is also a subscription.\n\n// We can iterate over the values of the subscription using `.iter()`.\n// `.iter()` is like `.run()` except it returns an `AsyncIterable`.\nfor await (const value of time.iter()) {\n  console.log(value) // This will continually print out timestamps until the script is stopped.\n  // Output:\n  //   1683555966001n\n  //   1683555972000n\n  //   1683555978000n\n  //   ...\n}\n")),(0,o.kt)("p",null,"Rune is able to correctly merge multiple (potentially interdependent)\nsubscriptions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\nimport { Rune } from "capi"\n\nconst blockHash = polkadot.latestBlockHash\nconst time = polkadot.Timestamp.Now.value(undefined, blockHash)\n\n// `Rune.object` takes multiple runes and combines them.\nconst blockWithTime = Rune.object({ blockHash, time })\n// blockWithTime: ValueRune<{ blockHash: string, time: bigint }>\n// Since `blockHash` and `time` are subscriptions, `blockWithTime` is also a subscription.\n// Though `blockHash` and `time` are two separate subscriptions, they are interdependent.\n// Rune ensures that all interdependent subscriptions are correctly paired.\n\n// Specific to Capi\'s API:\n//   It\'s not easy to get a subscription like `blockWithTime` from the RPC calls the nodes expose.\n//   Though there is a method to subscribe to blocks, and a method to subscribe to storage,\n//   there isn\'t a good way to know how those line up.\n//   Under the hood, Capi is subscribing to the latest block, and on every new block, querying storage.\n//   These results come in at different times, but Rune ensures that they are outputted simultaneously.\n\nfor await (const value of blockWithTime.iter()) {\n  console.log(value)\n  // Output:\n  //   {\n  //     blockHash: "0x0fb7fb31a01c7b6697d663d0040ae034e7c2d4e2a4aa7517424a8d3af2fa4135",\n  //     time: 1683556218000n, // we\'ll confirm this value in the next example\n  //   }\n  //   {\n  //     blockHash: "0x0cd01e56e75308c90ebc7015e5488172454264aedb2906213a15631db503a59c",\n  //     time: 1683556224001n,\n  //   }\n  //   {\n  //     blockHash: "0xdf1184b56340dd2f467417fb4366cfc941c7abb2802dd6be50d39a6328d25fad",\n  //     time: 1683556230000n,\n  //   }\n  //   ...\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"blockHash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"time")," values are correctly paired, meaning that each ",(0,o.kt)("inlineCode",{parentName:"p"},"time"),"\nvalue corresponds to the time at the block specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"blockHash"),". We can\nconfirm this using one of our earlier examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { polkadot } from "@capi/polkadot"\n\n// The `blockHash` from the first object printed\nconst blockHash =\n  "0x0fb7fb31a01c7b6697d663d0040ae034e7c2d4e2a4aa7517424a8d3af2fa4135"\n\nconst time = polkadot.Timestamp.Now.value(undefined, blockHash)\n\n// The `time` from the first object printed\nconsole.log(await time.run()) // 1683556218000n\n')))}d.isMDXComponent=!0}}]);